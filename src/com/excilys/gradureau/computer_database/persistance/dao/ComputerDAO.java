package com.excilys.gradureau.computer_database.persistance.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.time.Instant;
import java.time.LocalDateTime;
import java.util.LinkedList;
import java.util.List;
import java.util.TimeZone;

import com.excilys.gradureau.computer_database.model.Company;
import com.excilys.gradureau.computer_database.model.Computer;

public class ComputerDAO extends DAO<Computer> {
	
	private static final String QUERY_FIND_ALL = "SELECT pc.id as id, pc.name as name, introduced, discontinued, company_id, co.name as company.name "
			+ "FROM computer AS pc LEFT JOIN company AS co on pc.company_id = co.id;";
	private static final String QUERY_FIND = "SELECT id, name, introduced, discontinued, company_id FROM computer WHERE id = ?;";
	private static final String QUERY_CREATE = "INSERT INTO computer (name,introduced,discontinued,company_id) VALUES (?,?,?,?);";
	private static final String QUERY_UPDATE = "UPDATE computer SET name = ?, introduced = ?, discontinued = ?, company_id = ? WHERE id = ?;";
	
	DAO<Company> companyDao;

	public ComputerDAO(Connection connection) {
		super(connection);
		companyDao = new CompanyDAO(connection);
	}

	@Override
	public Computer find(long id) {
		Computer computer = null;
		try {
			PreparedStatement ps = connection.prepareStatement(QUERY_FIND);
			ps.setLong(1, id);
			ResultSet res = ps.executeQuery();
			if(res.first()) {
				Company company = null;
				if(res.getLong("company_id") != 0)
					company = companyDao.find(id);
				computer = new Computer(
						res.getLong("id"),
						res.getString("name"),
						timestamp2LocalDateTime(res.getTimestamp("introduced")),
						timestamp2LocalDateTime(res.getTimestamp("discontinued")),
						company
				);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return computer;
	}

	@Override
	public Computer create(Computer computer) {
		/*
		 * Might as well return a boolean to inform about the outcome
		 * and set the Long id of the Computer parameter object.
		 */
		try {
			PreparedStatement ps = connection.prepareStatement(QUERY_CREATE,
					Statement.RETURN_GENERATED_KEYS);
			ps.setString(1,computer.getName());
			ps.setTimestamp(2, Timestamp.valueOf(computer.getIntroduced()));
			ps.setTimestamp(3, Timestamp.valueOf(computer.getDiscontinued()));
			//if a computer has a company, it is supposed to be already present in the database, as the company list is known to be constant.
			ps.setLong(4, computer.getCompany() == null ?  computer.getCompany().getId() : null);
			ps.executeUpdate();
			
			ResultSet autoGenerated = ps.getGeneratedKeys();
			if(autoGenerated.next())
				computer = find(autoGenerated.getLong(1));//fill the Company part
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return computer;
	}

	@Override
	public Computer update(Computer computer) {
		// id presence is not implemented
		try {
			PreparedStatement ps = connection.prepareStatement(QUERY_UPDATE);
			ps.setString(1,computer.getName());
			ps.setTimestamp(2, Timestamp.valueOf(computer.getIntroduced()));
			ps.setTimestamp(3, Timestamp.valueOf(computer.getDiscontinued()));
			//if a computer has a company, it is supposed to be already present in the database, as the company list is known to be constant.
			ps.setLong(4, computer.getCompany() == null ?  computer.getCompany().getId() : null);
			ps.setLong(5, computer.getId());
			ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return computer;
	}

	@Override
	public void delete(Computer obj) {
		// TODO Auto-generated method stub
	}

	@Override
	public List<Computer> findAll() {
		List<Computer> computers = new LinkedList<Computer>();
		try {
			Statement stmt = connection.createStatement();
			ResultSet res = stmt.executeQuery(QUERY_FIND_ALL);
			while(res.next()) {
				Company company = null;
				if(res.getLong("company_id") != 0) {
					company = new Company(
							res.getLong("company_id"),
							res.getString("company.name")
							);
				}
				computers.add(
						new Computer(
								res.getLong("id"),
								res.getString("name"),
								timestamp2LocalDateTime(res.getTimestamp("introduced")),
								timestamp2LocalDateTime(res.getTimestamp("discontinued")),
								company
						)
				);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}		
		
		return computers;
	}
	
	private LocalDateTime timestamp2LocalDateTime(Timestamp t) {
		LocalDateTime res = null;
		if(t!=null) {
			LocalDateTime.ofInstant(
					Instant.ofEpochMilli(t.getTime()),
                    TimeZone.getDefault().toZoneId()
            );
		}
		return res;
	}

}
